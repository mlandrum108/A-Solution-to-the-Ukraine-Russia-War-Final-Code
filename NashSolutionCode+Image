import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from mpl_toolkits.mplot3d import Axes3D
from scipy.spatial import ConvexHull
import numpy as np

def solutions(ndim, feasible, dpp):
    from sage.all import Polyhedron, vector, SR, minimize_constrained, prod

    points = feasible.copy()
    points.append(dpp)
    possible = Polyhedron(points)

    con = [[0 for _ in range(ndim + 1)] for _ in range(ndim)]
    for i in range(ndim):
        con[i][i + 1] = 1
        con[i][0] = -dpp[i]
    ratn = possible.intersection(Polyhedron(ieqs=con))

    x = SR.var('x', ndim)
    v = vector([1] + list(x))
    con1 = [str(vector(c) * v) for c in ratn.inequalities_list()]
    con2 = ['lambda x: ' + c.replace('x0', 'x[0]').replace('x1', 'x[1]').replace('x2', 'x[2]') for c in con1]
    con3 = [eval(c) for c in con2]
    obj = lambda x: -prod([x[i] - dpp[i] for i in range(ndim)])
    vertices = [list(v) for v in ratn.vertices()]
    start = np.mean(vertices, axis=0).tolist()
    nash = minimize_constrained(obj, con3, start)

    return nash

def point_in_triangle_3d(p, tri_pts):
    """Check if point p is inside the triangle formed by tri_pts in 3D using barycentric coordinates."""
    from numpy.linalg import norm
    v0 = tri_pts[1] - tri_pts[0]
    v1 = tri_pts[2] - tri_pts[0]
    v2 = p - tri_pts[0]
    n = np.cross(v0, v1)
    n_norm = norm(n)
    if n_norm < 1e-8:
        return False  # Degenerate triangle

    # Check coplanarity
    if abs(np.dot(n, v2)) > 1e-5:
        return False

    # Barycentric coordinates
    dot00 = np.dot(v0, v0)
    dot01 = np.dot(v0, v1)
    dot02 = np.dot(v0, v2)
    dot11 = np.dot(v1, v1)
    dot12 = np.dot(v1, v2)
    denom = dot00 * dot11 - dot01 * dot01
    if denom == 0:
        return False
    u = (dot11 * dot02 - dot01 * dot12) / denom
    v = (dot00 * dot12 - dot01 * dot02) / denom

    return (u >= -1e-6) and (v >= -1e-6) and (u + v <= 1 + 1e-6)

# Setup data
ndim = 3
feasible = [
    (100, 0, 70), (0, 100, 10), (90, 15, 70),
    (80, 10, 70), (70, 25, 70), (65, 30, 40),
    (55, 60, 40), (45, 40, 40), (35, 55, 40),
    (65, 45, 40), (55, 60, 40), (45, 55, 40),
    (35, 70, 40), (30, 75, 10), (20, 90, 10),
    (10, 85, 10), (0, 100, 10)
]
dpp = (35, 38, 40)

# Compute Nash solution
nash = solutions(ndim, feasible, dpp)
nash_rounded = tuple(round(coord, 3) for coord in nash)

# Feasible region and convex hull
feasible_np = np.array(feasible)
hull = ConvexHull(feasible_np)

# Check which triangle contains the Nash solution
highlight_simplex = None
for idx, simplex in enumerate(hull.simplices):
    tri_pts = feasible_np[simplex]
    if point_in_triangle_3d(np.array(nash), tri_pts):
        print(f'Nash solution lies on triangle {idx} with vertices:\n{tri_pts}\n')
        highlight_simplex = simplex
        break
if highlight_simplex is None:
    print("Nash solution does not lie exactly on any triangle of the convex hull.")

# Plotting (without plotting the Nash point)
angles = [30, 60, 90, 120, 150, 180]
figsize = (10, 8)
dpi = 150

for angle in angles:
    fig = plt.figure(figsize=figsize, dpi=dpi)
    ax = fig.add_subplot(111, projection='3d')

    ax.scatter(feasible_np[:, 0], feasible_np[:, 1], feasible_np[:, 2], color='dimgray', s=40)

    for simplex in hull.simplices:
        pts = feasible_np[simplex]
        if np.array_equal(simplex, highlight_simplex):
            tri = Poly3DCollection([pts], alpha=0.5, facecolor='gold', edgecolor='black')
        else:
            tri = Poly3DCollection([pts], alpha=0.15, facecolor='gray', edgecolor='black')
        ax.add_collection3d(tri)

    # Disagreement point
    ax.scatter(*dpp, color='red', s=100)
    ax.text(dpp[0] - 5, dpp[1], dpp[2] - 9,
            f'Disagreement\n{dpp}', fontsize=9, color='red',
            ha='right', va='bottom')

    ax.set_xlabel('Ukraine')
    ax.set_ylabel('Russia')
    ax.set_zlabel('West')

    ax.view_init(elev=18, azim=angle)
    plt.tight_layout()
    plt.show()
-------------------------------------------------------------------------------------------------------------------
